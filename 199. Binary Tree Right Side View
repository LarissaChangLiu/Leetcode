/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        if (root == null){
            return new ArrayList<Integer>();
        }
        List<Integer> result = new ArrayList<Integer>();
        Stack<NodeWithDep> stack = new Stack<>();
        NodeWithDep nwdRoot = new NodeWithDep(root, 0);
        stack.push(nwdRoot);
        while(!stack.isEmpty()){
            NodeWithDep nwd = stack.pop();
            TreeNode curr = nwd.node;
            if (nwd.depth == result.size()){
                result.add(curr.val);
            }
            if (curr.left != null){
                stack.push(new NodeWithDep(curr.left, nwd.depth + 1));
            }
            if (curr.right != null){
                stack.push(new NodeWithDep(curr.right, nwd.depth + 1));
            }
        }
        return result;
    }
    
    class NodeWithDep{
        TreeNode node;
        int depth;
        NodeWithDep(TreeNode node, int depth){
            this.node = node;
            this.depth = depth;
        }
    }
}

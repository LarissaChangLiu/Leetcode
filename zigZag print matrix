public class zipPrintMatrix {

	public static void spiralOrderPrint(int[][] matrix) {
		int tR = 0;
		int tC = 0;
		int dR = matrix.length - 1;
		int dC = matrix[0].length - 1;
		while (tR <= dR && tC <= dC) {
			printEdge(matrix, tR++, tC++, dR--, dC--);
		}
	}

	public static void printEdge(int[][] m, int tR, int tC, int dR, int dC) {
		if (tR == dR) {
			for (int i = tC; i <= dC; i++) {
				System.out.print(m[tR][i] + " ");
			}
		} else if (tC == dC) {
			for (int i = tR; i <= dR; i++) {
				System.out.print(m[i][tC] + " ");
			}
		} else {
			int curC = tC;
			int curR = tR;
			while (curC != dC) {
				System.out.print(m[tR][curC] + " ");
				curC++;
			}
			while (curR != dR) {
				System.out.print(m[curR][dC] + " ");
				curR++;
			}
			while (curC != tC) {
				System.out.print(m[dR][curC] + " ");
				curC--;
			}
			while (curR != tR) {
				System.out.print(m[curR][tC] + " ");
				curR--;
			}
		}
	}

	public static void zigZagMatrix(int[][] matrix){
		final int[][] SHIFT = {{1, -1}, {-1, 1}};
		final int[][] RIGHTDOWN = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
		int rowLen = matrix.length;
		int colLen = matrix[0].length;
		int[][] flag = new int[2][];
		if (rowLen < colLen){
			flag[0] = RIGHTDOWN[0];
			flag[1] = RIGHTDOWN[0];
			helper(matrix, SHIFT, RIGHTDOWN);
		} else if (rowLen > colLen){
			flag[0] = RIGHTDOWN[1];
			flag[1] = RIGHTDOWN[1];
			helper(matrix, SHIFT, RIGHTDOWN);
		} else {
			flag[0] = RIGHTDOWN[0];
			flag[1] = RIGHTDOWN[1];
			helper(matrix, SHIFT, RIGHTDOWN);
		}
	}
	
	private static void helper(int[][] matrix, int[][] SHIFT, int[][] RIGHTDOWN){
		int rowLen = matrix.length;
		int colLen = matrix[0].length;
		int x = 0; 
		int y = 0;
		int turn1= 0;
		int turn2 = 0;
		for (int i = 0; i < rowLen * colLen; i++){
			System.out.println(matrix[x][y]);
 			matrix[x][y] = 0;
			int nextX = x + SHIFT[turn1][0];
			int nextY = y + SHIFT[turn1][1];
			if (nextX < 0 || nextX >= rowLen || nextY < 0 || nextY >= colLen){
				if (nextX < 0 && nextY >= colLen){
					turn2 = 1;
				} else if (nextX >= rowLen && nextY < 0) {
					turn2 = 0;
				} else {
					turn2 ^= 1;
				}			
				nextX = x + RIGHTDOWN[turn2][0];
				nextY = y + RIGHTDOWN[turn2][1];
				turn1 ^= 1;
			}
			x = nextX;
			y = nextY;
		}
	}
	
	public static void main(String[] args) {
		int[][] matrix = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 10, 11, 12 },{ 13, 14, 15, 16 } };
		zigZagMatrix(matrix);
	}

}
